Star[] chub = new Star[200];
ArrayList <Asteroid> asteroids = new ArrayList <Asteroid>();
public void keyPressed(){
  //frameRate(100);
  if(key == 'd'){//right turn
  Rex.turn(15);}
  
  if(key == 'a'){//left turn
  Rex.turn(-15);}
  
  if(key == 'w'){
  Rex.accelerate(0.2);
forward = true;
fill(225,0,0);
ellipse((int)Rex.getterX(),(int)Rex.getterY(),10,10);
}

  if(key == 'q'){
    Rex.hyperspace();
    background(0,0,225);
  }
}

public void setup(){
  size(400,400);
  Rex = new Spaceship();
//  background(0,0,0);
  for(int i = 0; i < chub.length; i++){
    chub[i] = new Star();}
 for (int i = 0; i < 10; i++) {
    asteroids.add(new Asteroid());
  }
  }



Spaceship Rex;
boolean left = false;
boolean right = false;
boolean forward = false;
boolean backward = false;
boolean hyperspace = false;

public void draw(){
  background(0,0,0);

  Rex.show();
  if(forward == true)
  Rex.move();

   for(int i = 0; i < chub.length; i++){
     chub[i].show();    
   }
   for (int i = 0; i < 10; i++) {
    if (asteroids.get(i).tooClose(Rex.getterX(), Rex.getterY())) asteroids.set(i, new Asteroid());
    asteroids.get(i).move();
    asteroids.get(i).show();
  }
}

class Spaceship extends Floater
{   

 public Spaceship(){
      myCenterX = (int)(Math.random()*401);
      myCenterY = (int)(Math.random()*401);
      myXspeed = 0;
      myYspeed = 0;
      myPointDirection = (double)(Math.random()*360);
      corners = 3;
      myColor = color(225,225,225);
      xCorners = new int[corners];
      yCorners = new int[corners];
      xCorners[0] = -8;
      yCorners[0] = -8;
      xCorners[1] = 16;
      yCorners[1] = 0;
      xCorners[2] = -8;
      yCorners[2] = 8;
    
    }
   public int getterX(){
     return (int)myCenterX;
   }
    public int getterY(){
     return (int)myCenterY;
   }
    public double getterSX(){
     return myXspeed;
   }
    public double getterSY(){
     return myYspeed;
   }
    public double getterDirection(){
     return myPointDirection;
   }
   public void hyperspace(){
      myCenterX = (int)(Math.random()*401);
      myCenterY = (int)(Math.random()*401);
      myPointDirection = (double)(Math.random()*360);
      myXspeed = 0;
      myYspeed = 0;
   }
}




class Asteroid extends Floater {
  private double rotSpeed;
  Asteroid() {
    myCenterX = Math.random()*500;
    myCenterY = Math.random()*500;
    corners = 4;
    xCorners = new int[corners];
    yCorners = new int[corners];
    int scaleFactor = 2;
    xCorners[0] = ((int)(Math.random()*2)+2)*scaleFactor;
    yCorners[0] = ((int)(Math.random()*7)+2)*scaleFactor;
    xCorners[1] = ((int)(Math.random()*3)+2)*scaleFactor;
    yCorners[1] = -((int)(Math.random()*6)+2)*scaleFactor;    
    xCorners[2] = -((int)(Math.random()*4)+3)*scaleFactor;
    yCorners[2] = -((int)(Math.random()*10)+3)*scaleFactor;    
    xCorners[3] = -((int)(Math.random()*1)+10)*scaleFactor;
    yCorners[3] = -((int)(Math.random()*1)+2)*scaleFactor;            
    myColor = color(225,225,225);   
    myXspeed = (Math.random()*5)+2;
    myYspeed = (Math.random()*5)+2; 
    myPointDirection = 0;
    rotSpeed = (Math.random()*2)+3;
  }
    public int getMyCenterY() {
    return (int)myCenterY;
  }
  public int getMyCenterX() {
    return (int)myCenterX;
  }
  public boolean tooClose(int shipX, int shipY) {
    double distance = dist((float)myCenterX, (float)myCenterY, (float)shipX, (float)shipY);
    return distance < 20;
  }
  public void move(int shipX, int shipY) {
    turn(rotSpeed);
    super.move();
  }
}
  

  
  
  
  
  


class Floater //Do NOT modify the Floater class! Make changes in the Spaceship class 
{   
  protected int corners;  //the number of corners, a triangular floater has 3   
  protected int[] xCorners;   
  protected int[] yCorners;   
  protected int myColor;   
  protected double myCenterX, myCenterY; //holds center coordinates   
  protected double myXspeed, myYspeed; //holds the speed of travel in the x and y directions   
  protected double myPointDirection; //holds current direction the ship is pointing in degrees    

  //Accelerates the floater in the direction it is pointing (myPointDirection)   
  public void accelerate (double dAmount)   
  {          
    //convert the current direction the floater is pointing to radians    
    double dRadians =myPointDirection*(Math.PI/180);     
    //change coordinates of direction of travel    
    myXspeed += ((dAmount) * Math.cos(dRadians));    
    myYspeed += ((dAmount) * Math.sin(dRadians));       
  }   
  public void turn (double degreesOfRotation)   
  {     
    //rotates the floater by a given number of degrees    
    myPointDirection+=degreesOfRotation;   
  }   
  public void move ()   //move the floater in the current direction of travel
  {      
    //change the x and y coordinates by myXspeed and myYspeed       
    myCenterX += myXspeed;    
    myCenterY += myYspeed;     

    //wrap around screen    
    if(myCenterX >width)
    {     
      myCenterX = 0;    
    }    
    else if (myCenterX<0)
    {     
      myCenterX = width;    
    }    
    if(myCenterY >height)
    {    
      myCenterY = 0;    
    } 
    
    else if (myCenterY < 0)
    {     
      myCenterY = height;    
    }   
  }   
  public void show ()  //Draws the floater at the current position  
  {             
    fill(myColor);   
    stroke(myColor);    
    
    //translate the (x,y) center of the ship to the correct position
    translate((float)myCenterX, (float)myCenterY);

    //convert degrees to radians for rotate()     
    float dRadians = (float)(myPointDirection*(Math.PI/180));
    
    //rotate so that the polygon will be drawn in the correct direction
    rotate(dRadians);
    
    //draw the polygon
    beginShape();
    for (int nI = 0; nI < corners; nI++)
    {
      vertex(xCorners[nI], yCorners[nI]);
    }
    endShape(CLOSE);

    //"unrotate" and "untranslate" in reverse order
    rotate(-1*dRadians);
    translate(-1*(float)myCenterX, -1*(float)myCenterY);
  }   
} 

class Star{
  private int myX, myY, myWidth, myHeight;
  public Star(){
    myX = (int)(Math.random()*400);
    myY = (int)(Math.random()*400);
   // myWidth = 2;
  //  myHeight = 2;
    myWidth = (int)(Math.random()*2)+1;
    myHeight = (int)(Math.random()*2+1);
  }
  
  public void show(){
   // fill(225,225,225);
    ellipse(myX,myY,myWidth,myHeight);
  }
}
